{"version":3,"file":"async_pipe.d.ts","sources":["async_pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, OnDestroy, PipeTransform } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n/**\n * @ngModule CommonModule\n * @whatItDoes Unwraps a value from an asynchronous primitive.\n * @howToUse `observable_or_promise_expression | async`\n * @description\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n *\n * ## Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @stable\n */\nexport declare class AsyncPipe implements OnDestroy, PipeTransform {\n    private _ref;\n    private _latestValue;\n    private _latestReturnedValue;\n    private _subscription;\n    private _obj;\n    private _strategy;\n    constructor(_ref: ChangeDetectorRef);\n    ngOnDestroy(): void;\n    transform<T>(obj: null): null;\n    transform<T>(obj: undefined): undefined;\n    transform<T>(obj: Observable<T>): T | null;\n    transform<T>(obj: Promise<T>): T | null;\n    private _subscribe(obj);\n    private _selectStrategy(obj);\n    private _dispose();\n    private _updateLatestValue(async, value);\n}\n"]}
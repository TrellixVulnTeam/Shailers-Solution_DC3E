{"version":3,"file":"backend.d.ts","sources":["backend.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { HttpBackend, HttpEvent, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { HttpTestingController, RequestMatch } from './api';\r\nimport { TestRequest } from './request';\r\n/**\r\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\r\n * and as the `HttpTestingController`.\r\n *\r\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\r\n * As requests come in, they're added to the list. Users can assert that specific\r\n * requests were made and then flush them. In the end, a verify() method asserts\r\n * that no unexpected requests were made.\r\n *\r\n * @experimental\r\n */\r\nexport declare class HttpClientTestingBackend implements HttpBackend, HttpTestingController {\r\n    /**\r\n     * List of pending requests which have not yet been expected.\r\n     */\r\n    private open;\r\n    /**\r\n     * Handle an incoming request by queueing it in the list of open requests.\r\n     */\r\n    handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\r\n    /**\r\n     * Helper function to search for requests in the list of open requests.\r\n     */\r\n    private _match(match);\r\n    /**\r\n     * Search for requests in the list of open requests, and return all that match\r\n     * without asserting anything about the number of matches.\r\n     */\r\n    match(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean)): TestRequest[];\r\n    /**\r\n     * Expect that a single outstanding request matches the given matcher, and return\r\n     * it.\r\n     *\r\n     * Requests returned through this API will no longer be in the list of open requests,\r\n     * and thus will not match twice.\r\n     */\r\n    expectOne(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): TestRequest;\r\n    /**\r\n     * Expect that no outstanding requests match the given matcher, and throw an error\r\n     * if any do.\r\n     */\r\n    expectNone(match: string | RequestMatch | ((req: HttpRequest<any>) => boolean), description?: string): void;\r\n    /**\r\n     * Validate that there are no outstanding requests.\r\n     */\r\n    verify(opts?: {\r\n        ignoreCancelled?: boolean;\r\n    }): void;\r\n    private descriptionFromMatcher(matcher);\r\n}\r\n"]}
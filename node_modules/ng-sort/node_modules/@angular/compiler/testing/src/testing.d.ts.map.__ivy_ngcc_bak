{"version":3,"file":"testing.d.ts","sources":["testing.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all APIs of the compiler package.\n *\n * <div class=\"callout is-critical\">\n *   <header>Unstable APIs</header>\n *   <p>\n *     All compiler apis are currently considered experimental and private!\n *   </p>\n *   <p>\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\n *   </p>\n * </div>\n */\nexport * from './schema_registry_mock';\nexport * from './directive_resolver_mock';\nexport * from './ng_module_resolver_mock';\nexport * from './pipe_resolver_mock';\nimport { ModuleWithComponentFactories, CompilerOptions, CompilerFactory, ComponentFactory, NgModuleFactory, Injector, NgModule, Component, Directive, Pipe, Type, PlatformRef } from '@angular/core';\nimport { MetadataOverride, ɵTestingCompilerFactory as TestingCompilerFactory, ɵTestingCompiler as TestingCompiler } from '@angular/core/testing';\nimport { JitCompiler, CompileMetadataResolver } from '@angular/compiler';\nimport { MockDirectiveResolver } from './directive_resolver_mock';\nimport { MockNgModuleResolver } from './ng_module_resolver_mock';\nimport { MockPipeResolver } from './pipe_resolver_mock';\nexport declare class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n    private _compilerFactory;\n    constructor(_compilerFactory: CompilerFactory);\n    createTestingCompiler(options: CompilerOptions[]): TestingCompiler;\n}\nexport declare class TestingCompilerImpl implements TestingCompiler {\n    private _compiler;\n    private _directiveResolver;\n    private _pipeResolver;\n    private _moduleResolver;\n    private _metadataResolver;\n    private _overrider;\n    constructor(_compiler: JitCompiler, _directiveResolver: MockDirectiveResolver, _pipeResolver: MockPipeResolver, _moduleResolver: MockNgModuleResolver, _metadataResolver: CompileMetadataResolver);\n    readonly injector: Injector;\n    compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n    compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n    compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n    compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n    getNgContentSelectors(component: Type<any>): string[];\n    getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n    checkOverrideAllowed(type: Type<any>): void;\n    overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n    overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n    overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n    overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n    loadAotSummaries(summaries: () => any[]): void;\n    clearCache(): void;\n    clearCacheFor(type: Type<any>): void;\n}\n/**\n * Platform for dynamic tests\n *\n * @experimental\n */\nexport declare const platformCoreDynamicTesting: (extraProviders?: any[]) => PlatformRef;\n"]}
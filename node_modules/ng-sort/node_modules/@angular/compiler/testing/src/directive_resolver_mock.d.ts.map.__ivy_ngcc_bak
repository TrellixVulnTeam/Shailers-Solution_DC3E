{"version":3,"file":"directive_resolver_mock.d.ts","sources":["directive_resolver_mock.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileReflector, DirectiveResolver } from '@angular/compiler';\nimport { Directive, Injector, Provider, Type, ÉµViewMetadata as ViewMetadata } from '@angular/core';\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nexport declare class MockDirectiveResolver extends DirectiveResolver {\n    private _injector;\n    private _directives;\n    private _providerOverrides;\n    private _viewProviderOverrides;\n    private _views;\n    private _inlineTemplates;\n    constructor(_injector: Injector, reflector: CompileReflector);\n    private readonly _compiler;\n    private _clearCacheFor(component);\n    resolve(type: Type<any>): Directive;\n    resolve(type: Type<any>, throwIfNotFound: true): Directive;\n    resolve(type: Type<any>, throwIfNotFound: boolean): Directive | null;\n    /**\n     * Overrides the {@link Directive} for a directive.\n     */\n    setDirective(type: Type<any>, metadata: Directive): void;\n    setProvidersOverride(type: Type<any>, providers: Provider[]): void;\n    setViewProvidersOverride(type: Type<any>, viewProviders: Provider[]): void;\n    /**\n     * Overrides the {@link ViewMetadata} for a component.\n     */\n    setView(component: Type<any>, view: ViewMetadata): void;\n    /**\n     * Overrides the inline template for a component - other configuration remains unchanged.\n     */\n    setInlineTemplate(component: Type<any>, template: string): void;\n}\n"]}
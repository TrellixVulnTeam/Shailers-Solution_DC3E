'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _angular_core = require('@angular/core');
var _angular_platformBrowser = require('@angular/platform-browser');

var AppComponent = (function () {
    function AppComponent() {
        this.name = 'Angular';
        this.people = [];
        this.people = [
            { firstName: 'James', lastName: 'Dean' },
            { firstName: 'John', lastName: 'Smith' },
            { firstName: 'Jane', lastName: 'Doe' },
        ];
    }
    /**
     * @return {?}
     */
    AppComponent.prototype.ngOnInit = function () {
        console.log('called');
    };
    return AppComponent;
}());
AppComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: 'app',
                template: "\n    <h1>Hello {{name}}</h1>\n\n    <table>\n        <thead>\n            <tr>\n               <td sort=\"firstName\">First Name</td>\n               <td sort=\"lastName\">Last Name</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let person of people\">\n                <td>{{ person.firstName }}</td>\n                <td>{{ person.lastName }}</td>\n            </tr>\n        </tbody>\n    </table>\n  "
            },] },
];
/**
 * @nocollapse
 */
AppComponent.ctorParameters = function () { return []; };

var ChangeDetector = (function () {
    function ChangeDetector() {
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ChangeDetector.refChanged = function (a, b) {
        if (a !== b)
            return true;
        if (a === null && b === null)
            return false;
        if (a === null || b === null)
            return true;
        if (a === undefined && b === undefined)
            return false;
        if (a === undefined || b === undefined)
            return true;
        return false;
    };
    /**
     * @param {?} a
     * @return {?}
     */
    ChangeDetector.isArray = function (a) {
        return a.constructor === [].constructor;
    };
    /**
     * @param {?} a
     * @return {?}
     */
    ChangeDetector.isObject = function (a) {
        return a.constructor === {}.constructor;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ChangeDetector.arrayChanged = function (a, b) {
        if (a.length != b.length)
            return true;
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
                return true;
        }
        return false;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ChangeDetector.objChanged = function (a, b) {
        if (Object.keys(a).length != Object.keys(b).length)
            return true;
        for (var /** @type {?} */ key in a) {
            if (a[key] !== b[key])
                return true;
        }
        return false;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ChangeDetector.referenceChanged = function (a, b) {
        return ChangeDetector.refChanged(a, b);
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ChangeDetector.propertyChanged = function (a, b) {
        if (ChangeDetector.isArray(a) && ChangeDetector.isArray(b)) {
            return ChangeDetector.arrayChanged(/** @type {?} */ (a), /** @type {?} */ (b));
        }
        if (ChangeDetector.isObject(a) && ChangeDetector.isObject(b)) {
            return ChangeDetector.objChanged(/** @type {?} */ (a), /** @type {?} */ (b));
        }
        return false;
    };
    return ChangeDetector;
}());

var SortService = (function () {
    function SortService() {
        this.parameters = [];
    }
    /**
     * @param {?} options
     * @return {?}
     */
    SortService.prototype.configure = function (options) {
        this.options = options;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SortService.prototype.register = function (name) {
        var /** @type {?} */ parm = this.parameters.find(function (t) { return t.name === name; });
        if (!parm) {
            parm = { name: name, asc: undefined, priority: undefined };
            this.parameters.push(parm);
        }
        return parm;
    };
    /**
     * @return {?}
     */
    SortService.prototype.clear = function () {
        this.parameters.forEach(function (t) {
            t.asc = undefined;
            t.priority = undefined;
        });
    };
    /**
     * @param {?} name
     * @param {?} asc
     * @return {?}
     */
    SortService.prototype.update = function (name, asc) {
        var /** @type {?} */ parm = this.parameters.find(function (t) { return t.name === name; });
        if (parm.asc === undefined) {
            parm.priority = this.parameters.map(function (t) { return t.priority || 0; }).reduce(function (p, c) { return c > p ? c : p; }, 0) + 1;
        }
        if (asc === undefined) {
            parm.priority = undefined;
        }
        parm.asc = asc;
    };
    /**
     * @param {?} array
     * @return {?}
     */
    SortService.prototype.sort = function (array) {
        if (this.tmp === null && array === null)
            return array;
        if (this.tmp === undefined && array === undefined)
            return array;
        if (!(ChangeDetector.referenceChanged(this.tmp, array) || ChangeDetector.propertyChanged(this.tmp, array))) {
            return array;
        }
        var /** @type {?} */ parameters = this.parameters.filter(function (t) { return t.priority !== undefined; })
            .sort(function (a, b) {
            if (a.priority < b.priority) {
                return -1;
            }
            if (a.priority > b.priority) {
                return 1;
            }
            return 0;
        });
        var /** @type {?} */ array = array.sort(function (a, b) {
            var /** @type {?} */ result = 0;
            parameters.forEach(function (parm) {
                if (result === 0) {
                    var /** @type {?} */ factor = parm.asc ? 1 : -1;
                    var /** @type {?} */ aa = a[parm.name];
                    var /** @type {?} */ bb = b[parm.name];
                    if (aa < bb) {
                        result = -1 * factor;
                    }
                    if (aa > bb) {
                        result = 1 * factor;
                    }
                }
            });
            return result;
        });
        this.tmp = array.slice();
        return this.tmp;
    };
    return SortService;
}());
SortService.decorators = [
    { type: _angular_core.Injectable },
];
/**
 * @nocollapse
 */
SortService.ctorParameters = function () { return []; };

var SortComponent = (function () {
    /**
     * @param {?} sortService
     * @param {?} elementRef
     */
    function SortComponent(sortService, elementRef) {
        this.sortService = sortService;
        this.elementRef = elementRef;
        if (sortService.options === undefined) {
            sortService.configure({
                noneClass: 'glyphicon-sort',
                ascendingClass: 'glyphicon-triangle-top',
                descendingClass: 'glyphicon-triangle-bottom'
            });
        }
    }
    /**
     * @return {?}
     */
    SortComponent.prototype.ngOnInit = function () {
        var /** @type {?} */ name = this.elementRef.nativeElement.getAttribute('sort');
        this.sortParameter = this.sortService.register(name);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SortComponent.prototype.onSortClick = function ($event) {
        var /** @type {?} */ nextSort = this.nextSort(this.sortParameter.asc);
        if (!$event.ctrlKey) {
            this.sortService.clear();
        }
        this.sortService.update(this.sortParameter.name, nextSort);
    };
    Object.defineProperty(SortComponent.prototype, "sortClass", {
        /**
         * @return {?}
         */
        get: function () {
            if (this.sortParameter.asc === undefined) {
                return this.sortService.options.noneClass;
            }
            if (this.sortParameter.asc === true) {
                return this.sortService.options.ascendingClass;
            }
            if (this.sortParameter.asc === false) {
                return this.sortService.options.descendingClass;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} current
     * @return {?}
     */
    SortComponent.prototype.nextSort = function (current) {
        if (current === undefined) {
            return true;
        }
        else if (current === true) {
            return false;
        }
        else {
            return undefined;
        }
    };
    return SortComponent;
}());
SortComponent.decorators = [
    { type: _angular_core.Component, args: [{
                selector: '[sort]',
                template: "\n      <ng-content></ng-content>\n      <span class=\"glyphicon\" [ngClass]=\"sortClass\"></span>\n    ",
                styles: []
            },] },
];
/**
 * @nocollapse
 */
SortComponent.ctorParameters = function () { return [
    { type: SortService, },
    { type: _angular_core.ElementRef, },
]; };
SortComponent.propDecorators = {
    'onSortClick': [{ type: _angular_core.HostListener, args: ['click', ['$event'],] },],
};

var SortPipe = (function () {
    /**
     * @param {?} sortService
     */
    function SortPipe(sortService) {
        this.sortService = sortService;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    SortPipe.prototype.transform = function (value) {
        return this.sortService.sort(value);
    };
    return SortPipe;
}());
SortPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'sort', pure: false },] },
];
/**
 * @nocollapse
 */
SortPipe.ctorParameters = function () { return [
    { type: SortService, decorators: [{ type: _angular_core.Inject, args: [SortService,] },] },
]; };

var AppModule = (function () {
    function AppModule() {
    }
    /**
     * @return {?}
     */
    AppModule.forRoot = function () {
        return {
            ngModule: AppModule,
            providers: [],
        };
    };
    return AppModule;
}());
AppModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                imports: [_angular_platformBrowser.BrowserModule],
                declarations: [AppComponent, SortComponent, SortPipe],
                exports: [AppComponent, SortComponent, SortPipe],
                providers: [SortService]
            },] },
];
/**
 * @nocollapse
 */
AppModule.ctorParameters = function () { return []; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the core package.
 */

/**
 * Generated bundle index. Do not edit.
 */

exports.AppModule = AppModule;
exports.SortService = SortService;
exports.ɵa = AppComponent;
exports.ɵb = SortComponent;
exports.ɵc = SortPipe;
//# sourceMappingURL=ng-sort.cjs.js.map
